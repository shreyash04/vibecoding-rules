[problem soving and debugging]
- Trace the full user flow and identify where issues originate. 
- Think deeply about the *root cause* and treat the symptom as a clue, not the target.
- Identify code that can be reused and extract it into reusable methods.

[model auto selection]
- When you are working in "Auto" mode, make sure to select appropriate models for tasks. For example: If you are working with Jupyter Notebooks (ipynb files), then only choose a model that is capable of making changes to such files. Do not tell me "The model is not able to work with Jupyter Notebooks"

[searching]
- Find Files: `fd`
- Find Text: `rg` (ripgrep)
- Find Code Structure: `ast-grep`
  - Rule (for ast-grep) = "You run in an environment where ast-grep (sg) is available; whenever a search requires syntax-aware or structural matching, default to `sg --lang <language> -p \"<pattern>\"` (set --lang appropriately, e.g., --lang python, --lang js) and avoid falling back to text-only tools like 'grep' unless you are searching for plain-text or ast-grep is not yielding results."

[efficiency and optimal workflow]
- Do not do donkey work and create unnecessary new scripts.
- Work on projects together with the user, clarifying ambiguities and iterating on user feedback. 
- If you have doubts and/or are performing a check that can be done faster by the user, ask clarifying questions and take help from the user.
- When something is intended to function a certain way (e.g., the Docker environment setup is supposed to activate the database migration scripts), but it keeps failing: Keep iteratively solving issues to eventually make the system functional as it was intended to be. In case there is no solution, explicitly state all possible reasons and thought process to the user before trying alternative approaches.
- Ask for help very often to simplify development
- Prompt the user with detailed instructions on how and where to perform checks to help the agent

[critical thinking]
- Avoid flattery. Unless necessary, do not use adjectives like "great", "fascinating", "profound", "excellent" at the beginning of a response
- Critically evaluate theories and claims rather than automatically agreeing. In most cases, prioritize truthfulness over agreeability
- Always try to gain a thorough overall understanding of the repository. If you are making changes in a large repository, make sure to take extra time to also handle the dependencies. Especially pay attention to parent and dependent files where changes might be required
- Make sure to point out flaws, factual errors, or lack of evidence

[environment activation]
- Make sure to use virtual environments (local/conda) when working in Python
```bash
# For Conda
conda --version
conda env list

# For venv/virtualenv
python -m venv --version
python -m pip --version
```
## Windows
### Git Bash
#### Conda
1. Initialize conda:
```bash
eval "$(conda shell.bash hook)"
conda activate your_env_name
```
2. Activate environment:
```bash
source .venv/Scripts/activate
```
### Command Prompt (cmd.exe)
#### Conda
```cmd
conda activate your_env_name
```
#### Virtualenv/venv
```cmd
.venv\Scripts\activate.bat
```

## Verification Steps
```bash
# Check Python location
which python  # Unix/Git Bash
where python  # Windows cmd

# Verify Python version
python --version

# Check environment name
# For Conda:
echo $CONDA_DEFAULT_ENV  # Unix/Git Bash
echo %CONDA_DEFAULT_ENV% # Windows cmd

# For virtualenv/venv:
echo $VIRTUAL_ENV  # Unix/Git Bash
echo %VIRTUAL_ENV% # Windows cmd

# Verify pip is from environment
pip -V
```
